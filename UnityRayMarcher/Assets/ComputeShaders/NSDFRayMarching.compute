// Each #kernel tells which function to compile; you can have many kernels
#include "UnityCG.cginc"
#pragma kernel CSMain

#define MAX_STEPS 256
#define MAX_DIST 1000.
#define EPS 1e-2

#define SPHERE_MAT 1
#define GROUND_MAT 2
#define PI 3.14159265

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWTexture2D<float4> Result;
Texture2D<float4> Skybox;
SamplerState LinearClampSampler;

struct Layer {
    uint startIndex;
    uint rows;
    uint columns;
    uint type;
};

StructuredBuffer<Layer> Layers;
StructuredBuffer<float3x4> Mat3x4s;
StructuredBuffer<float4x4> Mat4x4s;
StructuredBuffer<float4> Float4s;


float2 min2(float2 a, float2 b) {
    return a.x < b.x ? a : b;
}

float2 iResolution;
float4x4 CameraTransform;

float4 SPHERE;
float PLANE_HEIGHT;
float4 LIGHT;
float ShadowIntensity;
int LayersCount;

float Sin(const in float _x)
{
    // make a triangle wave that has y values from 0-1, where y is 0 at x=0
    float x = abs(frac((_x - radians(90.0)) / radians(360.0)) * 2.0 - 1.0);

    // smoothstep the triangle wave and then scale it to the -1 to 1 range
    return smoothstep(0.0, 1.0, x) * 2.0 - 1.0;

    // Note that you could use this instead of smoothstep above.  Same thing.
    //float x2 = x*x; 
    //return ((3.0 * x2) - (2.0 * x2 * x)) * 2.0 - 1.0;

    // or this:
    //return x * x * (3.0 - 2.0 * x) * 2.0 - 1.0;
}

float Cos(float _x) {
    return Sin(PI / 2. - _x);
}

float4 Sin(float4 x) {
    return float4(Sin(x.x), Sin(x.y), Sin(x.z), Sin(x.w));
}

float4 Cos(float4 x) {
    return float4(Cos(x.x), Cos(x.y), Cos(x.z), Cos(x.w));
}


float nsdf(float3 x) {
    // Fourier Mapping Layer
    //int count = max(1, Layers[0].columns / 4);

    // Computing Fourier Features;
    float4 ff[8];
    int i = 0, j = 0;
    for (i = 0; i < 4; i++) {
        ff[i] =     Sin(mul(2.0 * PI * x, Mat3x4s[Layers[0].startIndex + i]));
        ff[4 + i] = Cos(mul(2.0 * PI * x, Mat3x4s[Layers[0].startIndex + i]));
    }

    // Computing first layer output
    float4 o1[4];
    for (i = 0; i < 4; i++) {
        float4 f4 = float4(0, 0, 0, 0);
        for (j = 0; j < 8; j++) {
            f4 += mul(Mat4x4s[Layers[1].startIndex + i * (Layers[1].columns >> 2) + j], ff[j]);
        }
        o1[i] = max(0.0, f4 + Float4s[Layers[2].startIndex + i]);
    }


    // Computing second layer output
    float4 o2[4];
    for (i = 0; i < 4; i++) {
        float4 f4 = float4(0, 0, 0, 0);
        for (j = 0; j < 4; j++) {
            f4 += mul(Mat4x4s[Layers[3].startIndex + i * (Layers[3].columns >> 2) + j], o1[j]);
        }
        o2[i] = max(0.0, f4 + Float4s[Layers[4].startIndex + i]);
    }


    // Computing third layer output
    float f4 = 0.0;
    for (j = 0; j < 4; j++) {
        f4 += mul(Float4s[Layers[5].startIndex + j], o2[j]);
    }
    return (f4 + Float4s[Layers[6].startIndex]);
}

float3 REPXZ(in float3 p, in float2 factor)
{
    float2 tmp = fmod(p.xz, factor) - 0.5 * factor;
    return float3(tmp.x, p.y, tmp.y);
}


float sdBox(float3 p, float3 b)
{
    float3 q = abs(p) - b;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float2 GetDist(float3 p) {
     //p = REPXZ(p, float2(5., 5.));
    float2 dist = float2(sdBox(p, float3(1, 1, 1)), SPHERE_MAT);
    if (dist.x < EPS) {
        dist = float2(nsdf(p), SPHERE_MAT);
    }
    return dist;//min2(dist, float2(p.y - PLANE_HEIGHT, GROUND_MAT));
}

float2 GetDistUniform(float3 p, float3 rd) {
    float2 dist = float2(max(0.0, sdBox(p, float3(1, 1, 1))), SPHERE_MAT);
    float3 p2 = p + rd * dist.x;
    dist = float2(nsdf(p2) + dist.x, SPHERE_MAT);
    return dist;//min2(dist, float2(p.y - PLANE_HEIGHT, GROUND_MAT));
}

float3 GetNormal(float3 p) {
    float d = GetDist(p);
    float2 e = float2(EPS, 0);
    float3 n = d - float3(GetDist(p - e.xyy).x,
        GetDist(p - e.yxy).x,
        GetDist(p - e.yyx).x);
    return normalize(n);
}

float softshadow(float3 p, float k) {
    float res = 1.0;
    float ph = 1e20;

    float3 rd = normalize(LIGHT.xyz - p);
    for (float t = 0.1; t < LIGHT.w; ) {
        float dist = GetDist(p + rd * t).x;
        if (dist < EPS) {
            return 0.0;
        }
        //float y = dist * dist / (2.0 * ph);
        //float d = sqrt(dist * dist - y * y); 
        //res = min(res, k * d / max(0.0, t - y));
        t += dist;
    }
    return res;
}

float shadow(float p) {
    float res = 1.0;
    float ph = 1e20;

    float3 rd = normalize(LIGHT.xyz - p);
    for (float t = 0.1; t < LIGHT.w; ) {
        float dist = GetDistUniform(p + rd * t, rd).x;
        if (dist < EPS) {
            return 0.0;
        }
        //float y = dist * dist / (2.0 * ph);
        //float d = sqrt(dist * dist - y * y);
        //res = min(res, k * d / max(0.0, t - y));
        t += dist;
    }
    return res;
}

float2 RayMarch(float3 ro, float3 rd) {
    float currLength = 0.;
    float currMat = 0.;
    for (int i = 0; i < MAX_STEPS; i++) {
        float3 p = ro + currLength * rd;
        float2 dist = GetDist(p);
        if (currLength > MAX_DIST) {
            break;
        }
        if (dist.x < EPS) {
            currMat = dist.y;
        }
        currLength += dist.x;
    }
    return float2(currLength, currMat);
}


[numthreads(32, 32, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float2 uv = (id.xy - 0.5 * iResolution.xy) / iResolution.y;
    float3 ro = mul(CameraTransform, float4(0., 0., 0., 1.)).xyz;
    float3 rd = normalize(mul(CameraTransform, float4(uv.xy, 1., 0.)).xyz);

    float2 dist = RayMarch(ro, rd);
    float3 p = ro + dist.x * rd;

    float3 n = GetNormal(p);
    float2 skybox_uv = float2(atan2(rd.z, rd.x) + PI, acos(-rd.y)) / float2(2.0 * PI, PI);
    skybox_uv = float2(1.0 - skybox_uv.x, skybox_uv.y);
    float4 mat = Skybox.SampleLevel(LinearClampSampler, skybox_uv, 0);
    bool bg = true;
    if (dist.y == SPHERE_MAT) {
        mat = float4(0.75, 0.75, .75, 0.65);
        bg = false;
    }
    else if (dist.y == GROUND_MAT) {
        mat = float4(.1, .1, .1, 0.1);
        bg = false;
    }

    float dif = clamp(dot(n, normalize(LIGHT.xyz - p)), 0., 1.);
    float3 col;
    if (bg)
        col = mat;//float4(uv.xy, 0., 1.);
    else {
        float3 rd2 = reflect(rd, n);
        float2 refl_uv = float2(atan2(rd2.z, rd2.x) + PI, acos(-rd2.y)) / float2(2.0 * PI, PI);
        float4 refl = Skybox.SampleLevel(LinearClampSampler, refl_uv, 0);

        col = lerp(dif * mat, refl, mat.w);// *softshadow(p, ShadowIntensity);// *(1. - shadow(p));
    }
    //float3 col = float3(uv.x, uv.y, 1.);
    // Output to screen
    Result[id.xy] = float4(col, 1.);
}
